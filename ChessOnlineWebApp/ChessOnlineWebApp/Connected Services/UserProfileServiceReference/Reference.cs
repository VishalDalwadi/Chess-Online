//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChessOnlineWebApp.UserProfileServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/UserProfileManagementService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailID {
            get {
                return this.EmailIDField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailIDField, value) != true)) {
                    this.EmailIDField = value;
                    this.RaisePropertyChanged("EmailID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserProfileServiceReference.IUserProfileManagementService")]
    public interface IUserProfileManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/RegisterUser", ReplyAction="http://tempuri.org/IUserProfileManagementService/RegisterUserResponse")]
        void RegisterUser(ChessOnlineWebApp.UserProfileServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/RegisterUser", ReplyAction="http://tempuri.org/IUserProfileManagementService/RegisterUserResponse")]
        System.Threading.Tasks.Task RegisterUserAsync(ChessOnlineWebApp.UserProfileServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/IsUsernameTaken", ReplyAction="http://tempuri.org/IUserProfileManagementService/IsUsernameTakenResponse")]
        bool IsUsernameTaken(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/IsUsernameTaken", ReplyAction="http://tempuri.org/IUserProfileManagementService/IsUsernameTakenResponse")]
        System.Threading.Tasks.Task<bool> IsUsernameTakenAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/UserWithEmailIdExists", ReplyAction="http://tempuri.org/IUserProfileManagementService/UserWithEmailIdExistsResponse")]
        bool UserWithEmailIdExists(string email_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/UserWithEmailIdExists", ReplyAction="http://tempuri.org/IUserProfileManagementService/UserWithEmailIdExistsResponse")]
        System.Threading.Tasks.Task<bool> UserWithEmailIdExistsAsync(string email_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/SendPasswordResetToken", ReplyAction="http://tempuri.org/IUserProfileManagementService/SendPasswordResetTokenResponse")]
        void SendPasswordResetToken(string email_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/SendPasswordResetToken", ReplyAction="http://tempuri.org/IUserProfileManagementService/SendPasswordResetTokenResponse")]
        System.Threading.Tasks.Task SendPasswordResetTokenAsync(string email_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/ResetPassword", ReplyAction="http://tempuri.org/IUserProfileManagementService/ResetPasswordResponse")]
        void ResetPassword(string token, string email_id, string new_password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/ResetPassword", ReplyAction="http://tempuri.org/IUserProfileManagementService/ResetPasswordResponse")]
        System.Threading.Tasks.Task ResetPasswordAsync(string token, string email_id, string new_password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/DeleteUser", ReplyAction="http://tempuri.org/IUserProfileManagementService/DeleteUserResponse")]
        void DeleteUser(string jwtToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileManagementService/DeleteUser", ReplyAction="http://tempuri.org/IUserProfileManagementService/DeleteUserResponse")]
        System.Threading.Tasks.Task DeleteUserAsync(string jwtToken);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserProfileManagementServiceChannel : ChessOnlineWebApp.UserProfileServiceReference.IUserProfileManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserProfileManagementServiceClient : System.ServiceModel.ClientBase<ChessOnlineWebApp.UserProfileServiceReference.IUserProfileManagementService>, ChessOnlineWebApp.UserProfileServiceReference.IUserProfileManagementService {
        
        public UserProfileManagementServiceClient() {
        }
        
        public UserProfileManagementServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserProfileManagementServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserProfileManagementServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserProfileManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void RegisterUser(ChessOnlineWebApp.UserProfileServiceReference.User user) {
            base.Channel.RegisterUser(user);
        }
        
        public System.Threading.Tasks.Task RegisterUserAsync(ChessOnlineWebApp.UserProfileServiceReference.User user) {
            return base.Channel.RegisterUserAsync(user);
        }
        
        public bool IsUsernameTaken(string username) {
            return base.Channel.IsUsernameTaken(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsUsernameTakenAsync(string username) {
            return base.Channel.IsUsernameTakenAsync(username);
        }
        
        public bool UserWithEmailIdExists(string email_id) {
            return base.Channel.UserWithEmailIdExists(email_id);
        }
        
        public System.Threading.Tasks.Task<bool> UserWithEmailIdExistsAsync(string email_id) {
            return base.Channel.UserWithEmailIdExistsAsync(email_id);
        }
        
        public void SendPasswordResetToken(string email_id) {
            base.Channel.SendPasswordResetToken(email_id);
        }
        
        public System.Threading.Tasks.Task SendPasswordResetTokenAsync(string email_id) {
            return base.Channel.SendPasswordResetTokenAsync(email_id);
        }
        
        public void ResetPassword(string token, string email_id, string new_password) {
            base.Channel.ResetPassword(token, email_id, new_password);
        }
        
        public System.Threading.Tasks.Task ResetPasswordAsync(string token, string email_id, string new_password) {
            return base.Channel.ResetPasswordAsync(token, email_id, new_password);
        }
        
        public void DeleteUser(string jwtToken) {
            base.Channel.DeleteUser(jwtToken);
        }
        
        public System.Threading.Tasks.Task DeleteUserAsync(string jwtToken) {
            return base.Channel.DeleteUserAsync(jwtToken);
        }
    }
}
